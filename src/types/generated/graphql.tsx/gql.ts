/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query GetArticles($limit: Int) {\n    Article(order_by: { createdAt: desc }, limit: $limit) {\n      id\n      title\n      text\n      status\n      createdAt\n      updatedAt\n      Blog {\n        title\n      }\n    }\n  }\n": types.GetArticlesDocument,
    "\n  query GetBlogArticles($limit: Int, $id: uuid!) {\n    Blog(where: { id: { _eq: $id } }, limit: $limit) {\n      id\n      title\n      Articles {\n        id\n        text\n        title\n        createdAt\n        all_text\n        status\n        User {\n          name\n          id\n          email\n        }\n        Blog {\n          title\n        }\n      }\n    }\n  }\n": types.GetBlogArticlesDocument,
    "\n  query GetArticle($id: uuid!) {\n    Article(where: { id: { _eq: $id } }, order_by: { createdAt: desc }) {\n      id\n      title\n      text\n      createdAt\n      updatedAt\n      all_text\n      status\n      User {\n        name\n        id\n        email\n      }\n      Blog {\n        title\n      }\n    }\n  }\n": types.GetArticleDocument,
    "\n  query GetBlogs($limit: Int) {\n    Blog(order_by: { createdAt: desc }, limit: $limit) {\n      id\n      title\n      blog_users {\n        User {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.GetBlogsDocument,
    "\n  query GetUserBlogs($id: uuid, $limit: Int) {\n    Blog(\n      where: { blog_users: { User: { id: { _eq: $id } } } }\n      order_by: { createdAt: desc }\n      limit: $limit\n    ) {\n      id\n      title\n      blog_users {\n        User {\n          name\n        }\n      }\n    }\n  }\n": types.GetUserBlogsDocument,
    "\n  query GetBlog($id: uuid!, $limit: Int) {\n    Blog(where: { id: { _eq: $id } }) {\n      id\n      title\n      updatedAt\n      blog_users {\n        User {\n          name\n          id\n        }\n      }\n      Articles(\n        order_by: { createdAt: desc }\n        limit: $limit\n        where: { status: { _eq: true } }\n      ) {\n        id\n        createdAt\n        title\n        text\n        all_text\n        status\n      }\n    }\n  }\n": types.GetBlogDocument,
    "\n  query GetUser($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n      name\n      email\n      createdAt\n    }\n  }\n": types.GetUserDocument,
    "\n  mutation UpdateUser($id: uuid!, $email: String!, $name: String!) {\n    update_User_by_pk(\n      pk_columns: { id: $id }\n      _set: { id: $id, email: $email, name: $name }\n    ) {\n      id\n      name\n      email\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation UpdateDeleteArticle($id: uuid!, $status: Boolean!) {\n    update_Article_by_pk(pk_columns: { id: $id }, _set: { status: $status }) {\n      id\n      title\n      createdAt\n      status\n    }\n  }\n": types.UpdateDeleteArticleDocument,
};

export function graphql(source: "\n  query GetArticles($limit: Int) {\n    Article(order_by: { createdAt: desc }, limit: $limit) {\n      id\n      title\n      text\n      status\n      createdAt\n      updatedAt\n      Blog {\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetArticles($limit: Int) {\n    Article(order_by: { createdAt: desc }, limit: $limit) {\n      id\n      title\n      text\n      status\n      createdAt\n      updatedAt\n      Blog {\n        title\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetBlogArticles($limit: Int, $id: uuid!) {\n    Blog(where: { id: { _eq: $id } }, limit: $limit) {\n      id\n      title\n      Articles {\n        id\n        text\n        title\n        createdAt\n        all_text\n        status\n        User {\n          name\n          id\n          email\n        }\n        Blog {\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBlogArticles($limit: Int, $id: uuid!) {\n    Blog(where: { id: { _eq: $id } }, limit: $limit) {\n      id\n      title\n      Articles {\n        id\n        text\n        title\n        createdAt\n        all_text\n        status\n        User {\n          name\n          id\n          email\n        }\n        Blog {\n          title\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetArticle($id: uuid!) {\n    Article(where: { id: { _eq: $id } }, order_by: { createdAt: desc }) {\n      id\n      title\n      text\n      createdAt\n      updatedAt\n      all_text\n      status\n      User {\n        name\n        id\n        email\n      }\n      Blog {\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetArticle($id: uuid!) {\n    Article(where: { id: { _eq: $id } }, order_by: { createdAt: desc }) {\n      id\n      title\n      text\n      createdAt\n      updatedAt\n      all_text\n      status\n      User {\n        name\n        id\n        email\n      }\n      Blog {\n        title\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetBlogs($limit: Int) {\n    Blog(order_by: { createdAt: desc }, limit: $limit) {\n      id\n      title\n      blog_users {\n        User {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBlogs($limit: Int) {\n    Blog(order_by: { createdAt: desc }, limit: $limit) {\n      id\n      title\n      blog_users {\n        User {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetUserBlogs($id: uuid, $limit: Int) {\n    Blog(\n      where: { blog_users: { User: { id: { _eq: $id } } } }\n      order_by: { createdAt: desc }\n      limit: $limit\n    ) {\n      id\n      title\n      blog_users {\n        User {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserBlogs($id: uuid, $limit: Int) {\n    Blog(\n      where: { blog_users: { User: { id: { _eq: $id } } } }\n      order_by: { createdAt: desc }\n      limit: $limit\n    ) {\n      id\n      title\n      blog_users {\n        User {\n          name\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetBlog($id: uuid!, $limit: Int) {\n    Blog(where: { id: { _eq: $id } }) {\n      id\n      title\n      updatedAt\n      blog_users {\n        User {\n          name\n          id\n        }\n      }\n      Articles(\n        order_by: { createdAt: desc }\n        limit: $limit\n        where: { status: { _eq: true } }\n      ) {\n        id\n        createdAt\n        title\n        text\n        all_text\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBlog($id: uuid!, $limit: Int) {\n    Blog(where: { id: { _eq: $id } }) {\n      id\n      title\n      updatedAt\n      blog_users {\n        User {\n          name\n          id\n        }\n      }\n      Articles(\n        order_by: { createdAt: desc }\n        limit: $limit\n        where: { status: { _eq: true } }\n      ) {\n        id\n        createdAt\n        title\n        text\n        all_text\n        status\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetUser($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n      name\n      email\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetUser($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n      name\n      email\n      createdAt\n    }\n  }\n"];
export function graphql(source: "\n  mutation UpdateUser($id: uuid!, $email: String!, $name: String!) {\n    update_User_by_pk(\n      pk_columns: { id: $id }\n      _set: { id: $id, email: $email, name: $name }\n    ) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($id: uuid!, $email: String!, $name: String!) {\n    update_User_by_pk(\n      pk_columns: { id: $id }\n      _set: { id: $id, email: $email, name: $name }\n    ) {\n      id\n      name\n      email\n    }\n  }\n"];
export function graphql(source: "\n  mutation UpdateDeleteArticle($id: uuid!, $status: Boolean!) {\n    update_Article_by_pk(pk_columns: { id: $id }, _set: { status: $status }) {\n      id\n      title\n      createdAt\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDeleteArticle($id: uuid!, $status: Boolean!) {\n    update_Article_by_pk(pk_columns: { id: $id }, _set: { status: $status }) {\n      id\n      title\n      createdAt\n      status\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;